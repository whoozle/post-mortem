#!/usr/bin/env python

import argparse
import json
import re
import bisect
from subprocess import Popen, PIPE, STDOUT

parser = argparse.ArgumentParser(description='Post-mortem log analyzer')
parser.add_argument('log', help='log file')
parser.add_argument('--exe', help='executable')
parser.add_argument('-s', help='show reachable')
args = parser.parse_args()

with open(args.log) as f:
	data = json.load(f)

symbols = []
address = []
loaded = False

sym_re = re.compile(r'^([0-f]+).*\.text\s+([0-f]+)\s+(.+)$', re.IGNORECASE | re.MULTILINE)

def load_symbols():
	global loaded
	if loaded:
		return

	loaded = True
	if args.exe:
		p = Popen(['objdump', '-t', '-g', '-C', args.exe], bufsize=1024*1024, stdout=PIPE, stdin=PIPE, stderr=STDOUT)
		print "reading symbols..."
		stdout, stderr = p.communicate()
		print "sorting..."
		for sym in sym_re.finditer(stdout):
			addr = int(sym.group(1), 16)
			address.append(addr)
			symbols.append((addr, int(sym.group(2), 16), sym.group(3)))
		symbols.sort(key = lambda s: s[0])
		address.sort()
		print "loaded %d symbols" %len(symbols)

def get_location(ip):
	load_symbols()
	idx = bisect.bisect(address, ip)
	idx -= 1

	location = '?'
	if idx >= 0 and idx < len(symbols):
		addr, size, name = symbols[idx]
		if ip >= addr and ip < addr + size:
			location = name + " (+%d)" %(ip - addr)
	return "\t0x%08x\t%s" %(ip, location)

class State(object):
	def __init__(self, ev):
		self.__dict__  = ev
	def __repr__(self):
		return str(self.__dict__)

class Chunk(object):
	def __init__(self, state):
		if state.action == 'free':
			print "FREE WITHOUT ALLOC"
		self.state = state

	def show_state(self, state):
		print "thread id: 0x%08x" %state.thread
		for ip in state.backtrace:
			print get_location(ip)
		print

	def failure(self, message, old, new):
		print "%s on pointer with address 0x%08x" %(message, old.ptr)
		self.show_state(old)
		self.show_state(new)

	def event(self, state):
		old = self.state
		if old.action == 'free' and state.action == 'free':
			self.failure('double free', old, state)

		if old.action == 'alloc' and state.action == 'alloc':
			self.failure('double alloc', old, state)
		self.state = state

class Heap(object):
	def __init__(self):
		self.__chunks = {}

	def dispatch(self, ev):
		ptr = ev['ptr']
		if ptr == 0:
			return
		if ptr in self.__chunks:
			self.__chunks[ptr].event(State(ev))
		else:
			self.__chunks[ptr] = Chunk(State(ev))

	def dump_alloc(self):
		return filter(lambda x: x.state.action == 'alloc', self.__chunks.itervalues())

heap = Heap()
log = data['log']
for event in log:
	heap.dispatch(event)

if args.s:
	reachable = heap.dump_alloc()
	for chunk in reachable:
		state = chunk.state
		print "memory block of %d bytes is still reachable" %state.size
